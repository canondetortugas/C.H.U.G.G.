#!/usr/bin/env python

import sys
import time

from PyQt4 import QtCore, QtGui
from PyQt4.QtCore import pyqtSignal, pyqtSlot, QObject

import pyqtgraph as pg

import rospy

import tf.transformations as trans
from chugg_tracker.msg import Posterior
from chugg_tracker.msg import Sample

import numpy as np

channels = ['roll', 'pitch', 'yaw', 'wx', 'wy', 'wz']

class HistViewer(QObject):
    notify = pyqtSignal()
    
    def __init__(self, names):
        QObject.__init__(self)
        
        self.nd = len(names)
        self.plots = {}
        self.win = pg.GraphicsWindow()
        for (idx, name) in zip(range(len(names)), names):
            pp = pg.PlotItem()
            pp.setTitle(name)
            self.win.addItem(pp, row=idx, col=0)
            self.plots[name] = pp

    def connect(self, *args):
        self.notify.connect(*args)
        
    def updateHist(self, name, x, y):
        plot = self.plots[name]
        plot.clear()
        # Pull out all left bin edges into x0 and right bin edges into x1
        x0 = x[:-1]
        x1 = x[1:]
        bb = pg.BarGraphItem(x0=x0, x1=x1, height=y)
        plot.addItem(bb)

    @pyqtSlot(dict)
    def updateAll(self, labeled_data):
        for (name, data) in labeled_data.iteritems():
            self.updateHist(name, data[0], data[1])
        self.notify.emit()


        
class RosNode(QtCore.QThread):
    notify = pyqtSignal(dict)
    
    def __init__(self):
        QtCore.QThread.__init__(self)
        self.waiting = False
        # self.notify.connect(viewer.updateAll)

    def connect(self, *args):
        self.notify.connect(*args)
        
    @pyqtSlot()
    def stopWaiting(self):
        self.waiting = False

    def run(self):
        self.sub = rospy.Subscriber(rospy.get_param('~post_topic', 'chugg_tracker/filter/posterior'), 
                                    Posterior, callback=self.postCallback)

        rospy.spin()

        # while True:
        #     time.sleep(0.01)
        #     samples = []
        #     for i in range(100):
        #         sample = Sample()
        #         sample.ori.x = np.random.randn()
        #         sample.ori.y = np.random.randn()
        #         sample.ori.z = np.random.randn()
        #         sample.ori.w = np.random.randn()
        #         sample.vel.x = np.random.randn()
        #         sample.vel.y = np.random.randn()
        #         sample.vel.z = np.random.randn()
        #         n = np.sqrt(sample.ori.x**2 + sample.ori.y**2 + sample.ori.z**2 + sample.ori.w**2)
        #         sample.ori.x /= n
        #         sample.ori.y /= n
        #         sample.ori.z /= n
        #         sample.ori.w /= n
        #         samples.append(sample)
        #     msg = Posterior()
        #     msg.samples = samples
        #     self.postCallback(msg)
                
    def postCallback(self, msg):
        if self.waiting:
            return

        samples = {channel: [] for channel in channels}
        
        hist = {}

        for sample in msg.samples:
            q = sample.ori
            v = sample.vel
            # I belive the 's' is for 'static'. If not, try 'r'
            r, p, y = trans.euler_from_quaternion((q.x, q.y, q.z, q.w), 'sxyz')
            samples['roll'].append(r)
            samples['pitch'].append(p)
            samples['yaw'].append(y)
            samples['wx'].append(v.x)
            samples['wy'].append(v.y)
            samples['wz'].append(v.z)
        for (ax, ss) in samples.iteritems():
            # bins is a list of the histogram bin edges (length(ss)+1)
            n, bins = np.histogram(ss, bins=100)
            hist[ax] = (bins, n)
        
        self.waiting = True
        self.notify.emit(hist)

if __name__=="__main__":
    app = QtGui.QApplication(rospy.myargv())
    rospy.init_node('post_view', anonymous=True)

    hv = HistViewer(channels)
    rn = RosNode()

    rn.connect(hv.updateAll)
    hv.connect(rn.stopWaiting)

    rn.start()

    app.exec_()
