#!/usr/bin/env python

PACKAGE='chugg_finder'

from dynamic_reconfigure.parameter_generator_catkin import *
from driver_base.msg import SensorLevels

gen = ParameterGenerator()

################################################################################################################################
# Parameter Examples. Add your own parameters below
################################################################################################################################

# Valid types: bool_t, int_t, double_t, str_t

#          Name        Type   Reconfiguration level             Description                         Default Min Max
gen.add( "side_samples", int_t, SensorLevels.RECONFIGURE_RUNNING, "Sample points per side.", 1000,     1,  100000 )
gen.add( "edge_length", double_t, SensorLevels.RECONFIGURE_RUNNING, "C.H.U.G.G. edge length, in inches", 8.0,     0.1,  100.0 )

# Example enum:
# size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                   gen.const("Medium", int_t, 1, "A medium constant"),
#                   gen.const("Large", int_t, 2, "A large constant"),
#                   gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                   "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

################################################################################################################################
################################################################################################################################


exit(gen.generate(PACKAGE, "chugg_finder", "ChuggFinder"))
