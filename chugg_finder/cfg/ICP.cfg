#!/usr/bin/env python

PACKAGE='chugg_finder'

from dynamic_reconfigure.parameter_generator_catkin import *
from driver_base.msg import SensorLevels

gen = ParameterGenerator()

gen.add( "max_correspondence_distance", double_t, SensorLevels.RECONFIGURE_RUNNING, "My very own dynamic parameter.", 0.05,     0.0001,  1 )
gen.add( "max_iterations", double_t, SensorLevels.RECONFIGURE_RUNNING, "My very own dynamic parameter.", 50,     1,  5000 )
gen.add( "transformation_epsilon", double_t, SensorLevels.RECONFIGURE_RUNNING, "My very own dynamic parameter.", 1e-8,     1e-12,  1 )
gen.add( "euclidian_fitness_epsilon", double_t, SensorLevels.RECONFIGURE_RUNNING, "My very own dynamic parameter.", 1,     0.0001,  100 )

################################################################################################################################
# Parameter Examples. Add your own parameters below
################################################################################################################################

# Valid types: bool_t, int_t, double_t, str_t

#          Name        Type   Reconfiguration level             Description                         Default Min Max
# gen.add( "my_param", int_t, SensorLevels.RECONFIGURE_RUNNING, "My very own dynamic parameter.", 10,     1,  100 )

# Example enum:
# size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                   gen.const("Medium", int_t, 1, "A medium constant"),
#                   gen.const("Large", int_t, 2, "A large constant"),
#                   gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                   "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

################################################################################################################################
################################################################################################################################


exit(gen.generate(PACKAGE, "ICP", "ICP"))
